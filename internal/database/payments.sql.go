// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payments.sql

package database

import (
	"context"
	"database/sql"
)

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (
    order_uid, 
    transaction,
    request_id,
    currency,
    provider,
    amount,
    payment_dt,
    bank,
    delivery_cost,
    goods_total,
    custom_fee
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING order_uid, transaction, request_id, currency, provider, amount, payment_dt, bank, delivery_cost, goods_total, custom_fee
`

type CreatePaymentParams struct {
	OrderUid     string
	Transaction  string
	RequestID    sql.NullString
	Currency     string
	Provider     string
	Amount       int32
	PaymentDt    int64
	Bank         string
	DeliveryCost int32
	GoodsTotal   int32
	CustomFee    int32
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.ExecContext(ctx, createPayment,
		arg.OrderUid,
		arg.Transaction,
		arg.RequestID,
		arg.Currency,
		arg.Provider,
		arg.Amount,
		arg.PaymentDt,
		arg.Bank,
		arg.DeliveryCost,
		arg.GoodsTotal,
		arg.CustomFee,
	)
	return err
}

const getPayment = `-- name: GetPayment :many
SELECT order_uid, transaction, request_id, currency, provider, amount, payment_dt, bank, delivery_cost, goods_total, custom_fee FROM payments
`

func (q *Queries) GetPayment(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPayment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.OrderUid,
			&i.Transaction,
			&i.RequestID,
			&i.Currency,
			&i.Provider,
			&i.Amount,
			&i.PaymentDt,
			&i.Bank,
			&i.DeliveryCost,
			&i.GoodsTotal,
			&i.CustomFee,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpecificPayment = `-- name: GetSpecificPayment :one
SELECT order_uid, transaction, request_id, currency, provider, amount, payment_dt, bank, delivery_cost, goods_total, custom_fee FROM payments WHERE order_uid = $1
`

func (q *Queries) GetSpecificPayment(ctx context.Context, orderUid string) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getSpecificPayment, orderUid)
	var i Payment
	err := row.Scan(
		&i.OrderUid,
		&i.Transaction,
		&i.RequestID,
		&i.Currency,
		&i.Provider,
		&i.Amount,
		&i.PaymentDt,
		&i.Bank,
		&i.DeliveryCost,
		&i.GoodsTotal,
		&i.CustomFee,
	)
	return i, err
}
