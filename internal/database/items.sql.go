// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: items.sql

package database

import (
	"context"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO items (
    order_uid, 
    chrt_id,
    track_number,
    price,
    rid,
    name,
    sale,
    size,
    total_price,
    nm_id,
    brand,
    status
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING item_id, order_uid, chrt_id, track_number, price, rid, name, sale, size, total_price, nm_id, brand, status
`

type CreateItemParams struct {
	OrderUid    string
	ChrtID      int32
	TrackNumber string
	Price       int32
	Rid         string
	Name        string
	Sale        int32
	Size        string
	TotalPrice  int32
	NmID        int32
	Brand       string
	Status      int32
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.OrderUid,
		arg.ChrtID,
		arg.TrackNumber,
		arg.Price,
		arg.Rid,
		arg.Name,
		arg.Sale,
		arg.Size,
		arg.TotalPrice,
		arg.NmID,
		arg.Brand,
		arg.Status,
	)
	return err
}

const getItems = `-- name: GetItems :many
SELECT item_id, order_uid, chrt_id, track_number, price, rid, name, sale, size, total_price, nm_id, brand, status FROM items
`

func (q *Queries) GetItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ItemID,
			&i.OrderUid,
			&i.ChrtID,
			&i.TrackNumber,
			&i.Price,
			&i.Rid,
			&i.Name,
			&i.Sale,
			&i.Size,
			&i.TotalPrice,
			&i.NmID,
			&i.Brand,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpecificItems = `-- name: GetSpecificItems :many
SELECT item_id, order_uid, chrt_id, track_number, price, rid, name, sale, size, total_price, nm_id, brand, status FROM items WHERE order_uid = $1
`

func (q *Queries) GetSpecificItems(ctx context.Context, orderUid string) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getSpecificItems, orderUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ItemID,
			&i.OrderUid,
			&i.ChrtID,
			&i.TrackNumber,
			&i.Price,
			&i.Rid,
			&i.Name,
			&i.Sale,
			&i.Size,
			&i.TotalPrice,
			&i.NmID,
			&i.Brand,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
