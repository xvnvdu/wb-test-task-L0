// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: delivery.sql

package database

import (
	"context"
)

const createDelivery = `-- name: CreateDelivery :exec
INSERT INTO delivery (
    order_uid, 
    name,
    phone,
    zip,
    city,
    address,
    region,
    email
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING order_uid, name, phone, zip, city, address, region, email
`

type CreateDeliveryParams struct {
	OrderUid string
	Name     string
	Phone    string
	Zip      string
	City     string
	Address  string
	Region   string
	Email    string
}

func (q *Queries) CreateDelivery(ctx context.Context, arg CreateDeliveryParams) error {
	_, err := q.db.ExecContext(ctx, createDelivery,
		arg.OrderUid,
		arg.Name,
		arg.Phone,
		arg.Zip,
		arg.City,
		arg.Address,
		arg.Region,
		arg.Email,
	)
	return err
}

const getDelivery = `-- name: GetDelivery :many
SELECT order_uid, name, phone, zip, city, address, region, email FROM delivery
`

func (q *Queries) GetDelivery(ctx context.Context) ([]Delivery, error) {
	rows, err := q.db.QueryContext(ctx, getDelivery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Delivery
	for rows.Next() {
		var i Delivery
		if err := rows.Scan(
			&i.OrderUid,
			&i.Name,
			&i.Phone,
			&i.Zip,
			&i.City,
			&i.Address,
			&i.Region,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
